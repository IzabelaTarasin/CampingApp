@page "/newplace"
@using CampingApp.Services;
@using System.Net.Http.Headers;
@inject IPlaceService PlaceService;
@inject NavigationManager NavigationManager;

<PageTitle>@title</PageTitle>

<div class="text-center container">
    <div class="mainText">
        <h1 class="display-4 text-capitalize text-black">Dodaj obiekt</h1>
    </div>
    <EditForm Model="@inputmodel" OnValidSubmit="@HandleValidSubmit">
        <div>
            <InputText id="name" @bind-Value="inputmodel.Name" placeholder="nazwa obiektu" />
        </div>
        <div>
            <InputTextArea id="description" @bind-Value="inputmodel.Description" rows="5" maxlength="150" placeholder="opis" />
        </div>
        <div>
            <label>Cena za dobę:</label>
            <InputNumber id="price-per-day" @bind-Value=inputmodel.PricePerDay />
        </div>
        <div>
            <label>Liczba przestrzeni na polu kempingowym:</label>
            <InputNumber id="areas" @bind-Value=inputmodel.MaxPeople />
        </div>
        <div>
            <p>Adres:</p>
        </div>
        <div>
            <InputText id="street" @bind-Value="inputmodel.Street" placeholder="ulica / osiedle" />
        </div>
        <div>
            <InputText id="house-number" @bind-Value="inputmodel.HouseNumber" placeholder="numer domu" />
            <InputText id="local-number" @bind-Value="inputmodel.LocalNumber" placeholder="numer mieszkania" />
        </div>
        <div>
            <InputText id="postal-code" @bind-Value="inputmodel.PostalCode" placeholder="kod poczowy" />
            <InputText id="city" @bind-Value="inputmodel.City" placeholder="miasto" />
        </div>
        <div>
            <label for="voivodeship">województwo:</label>
            <InputSelect @bind-Value=inputmodel.Voivodeship>
                <option value="dolnośląskie">dolnośląskie</option>
                <option value="kujawsko-pomorskie">kujawsko-pomorskie</option>
                <option value="lubelskie">lubelskie</option>
                <option value="lubuskie">lubuskie</option>
                <option value="łódzkie">łódzkie</option>
                <option value="małopolskie">małopolskie</option>
                <option value="mazowieckie">mazowieckie</option>
                <option value="opolskie">opolskie</option>
                <option value="podkarpackie">podkarpackie</option>
                <option value="podlaskie">podlaskie</option>
                <option value="pomorskie">pomorskie</option>
                <option value="śląskie">śląskie</option>
                <option value="świętokrzyskie">świętokrzyskie</option>
                <option value="warmińsko-mazurskie">warmińsko-mazurskie</option>
                <option value="wielkopolskie">wielkopolskie</option>
                <option value="zachodniopomorskie">zachodniopomorskie</option>
            </InputSelect>
        </div>
        <div>
            <InputText id="country" @bind-Value="inputmodel.Country" placeholder="kraj" />
        </div>
        <div>
            <div>
                <p>Udogodnienia:</p>
            </div>
            <div>
                <label class="switch">
                    <InputCheckbox id="animals-allowed-checkbox" @bind-Value="inputmodel.AnimalsAllowed" />
                    <span class="slider round"></span>
                </label>
                <span>Przyjazne zwierzętom</span>
            </div>
            <div>
                <label class="switch">
                    <InputCheckbox id="reception-exists-checkbox" @bind-Value="inputmodel.ReceptionExist" />
                    <span class="slider round"></span>
                </label>
                <span>Całodzienna recepcja</span>
            </div>
            <div>
                <label class="switch">
                    <InputCheckbox id="medic-exists-checkbox" @bind-Value="inputmodel.MedicExist" />
                    <span class="slider round"></span>
                </label>
                <span>Usługi medyczne</span>
            </div>
            <div>
                <label class="switch">
                    <InputCheckbox id="restaurant-exists-checkbox" @bind-Value="inputmodel.RestaurantExist" />
                    <span class="slider round"></span>
                </label>
                <span>Restauracja</span>
            </div>
            <div>
                <label class="switch">
                    <InputCheckbox id="grill-exists-checkbox" @bind-Value="inputmodel.GrillExist" />
                    <span class="slider round"></span>
                </label>
                <span>Miejsce na ognisko lub grilla</span>
            </div>
            <div>
                <label class="switch">
                    <InputCheckbox id="wifi-exists-checkbox" @bind-Value="inputmodel.WifiExist" />
                    <span class="slider round"></span>
                </label>
                <span>WiFi</span>
            </div>
            <div>
                <label class="switch">
                    <InputCheckbox id="swimmingpool-exists-checkbox" @bind-Value="inputmodel.SwimmingpoolExist" />
                    <span class="slider round"></span>
                </label>
                <span>Basen</span>
            </div>
        </div>
        <InputFile OnChange="@HandleSelected" />
        <div>
            <button class="btn btn-primary mt-1" type="submit">Add</button>
        </div>
    </EditForm>
</div>

@code{
    private string title = "CampApp";

    private InputModel inputmodel = new InputModel();

    private class InputModel
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public string Image { get; set; }
        public double PricePerDay { get; set; }
        public int MaxPeople { get; set; }
        public bool AnimalsAllowed { get; set; }
        public bool RestaurantExist { get; set; }
        public bool ReceptionExist { get; set; }
        public bool MedicExist { get; set; }
        public bool GrillExist { get; set; }
        public bool WifiExist { get; set; }
        public bool SwimmingpoolExist { get; set; }
        //address
        public string PostalCode { get; set; }
        public string City { get; set; }
        public string HouseNumber { get; set; }
        public string LocalNumber { get; set; }
        public string Street { get; set; }
        public string Voivodeship { get; set; } = "dolnośląskie";
        public string Country { get; set; }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var result = await PlaceService.AddPlace(
                inputmodel.Name,
                inputmodel.Description,
                inputmodel.Image,
                inputmodel.PricePerDay,
                inputmodel.MaxPeople,
                inputmodel.AnimalsAllowed,
                inputmodel.RestaurantExist,
                inputmodel.ReceptionExist,
                inputmodel.MedicExist,
                inputmodel.GrillExist,
                inputmodel.WifiExist,
                inputmodel.SwimmingpoolExist,
                inputmodel.PostalCode,
                inputmodel.City,
                inputmodel.HouseNumber,
                inputmodel.LocalNumber,
                inputmodel.Street,
                inputmodel.Voivodeship,
                inputmodel.Country);

            //przeladowanie strony z nawigacja do strony glownej:
            NavigationManager.NavigateTo("/myplaces", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        if (imageFile != null)
        {
            var resizedFile = await imageFile.RequestImageFileAsync("image/png", 300, 500); //reskalowanie obrazka pzrez parametry 300 i 500

            using (var ms = resizedFile.OpenReadStream(resizedFile.Size))
            {
                using (var memoryStream = new MemoryStream())
                {
                    await ms.CopyToAsync(memoryStream);
                    var bytes = memoryStream.ToArray();
                    string s = Convert.ToBase64String(bytes);
                    inputmodel.Image = s;
                }
            }
        }
    }
}
