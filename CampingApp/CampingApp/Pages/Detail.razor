@page "/detail/{PlaceId:int}"
@using CampingApp.Domain;
@using Microsoft.AspNetCore.Components.Authorization;
@using CampingApp.Services;
@inject IReservationService ReservationService;
@inject IPlaceService PlaceService;
@inject NavigationManager NavigationManager;

<PageTitle>@title</PageTitle>
@if (placeModel is not null)
{
    <div class="text-center">
        <div class="mainText">
            <h1 class="display-4 text-capitalize text-black">Obiekt @placeModel.Name</h1>
        </div>
        <div>
            @*<img src="<?= isset($place) ? $place->getImagePath() : '';?>" width="500" height="500">*@
            <img src="@placeModel.ImageToDisplay()" asp-append-version="true" />
        </div>
        <div>
            <div>
                <br />
                <b>Opis:</b>
                <div>@placeModel.Description</div>
            </div>
            <div>
                <br />
                <b>Lokalizacja:</b>
                <div>
                    ul. @placeModel.Address.Street @placeModel.Address.HouseNumber/@placeModel.Address.LocalNumber
                    @placeModel.Address.PostalCode @placeModel.Address.City
                </div>
                <div>woj. @placeModel.Address.Voivodeship</div>
            </div>
            <div>
                <br />
                <b>Udogodnienia w obiekcie:</b>
                <div>
                    @if (placeModel.AnimalsAllowed)
                    {
                        <span>Przyjazne zwierzętom</span>
                    }
                </div>
                <div>
                    @if (placeModel.ReceptionExist)
                    {
                        <span>Całodzienna recepcja</span>
                    }
                </div>
                <div>
                    @if (placeModel.MedicExist)
                    {
                        <span>Usługi medyczne</span>
                    }
                </div>
                <div>
                    @if (placeModel.RestaurantExist)
                    {
                        <span>Restauracja</span>
                    }
                </div>
                <div>
                    @if (placeModel.GrillExist)
                    {
                        <span>Miejsce na ognisko lub grilla</span>
                    }
                </div>
                <div>
                    @if (placeModel.WifiExist)
                    {
                        <span>WiFi</span>
                    }
                </div>
                <div>
                    @if (placeModel.SwimmingpoolExist)
                    {
                        <span>Basen</span>
                    }
                </div>
            </div>
            <div>
                <br />
                <br />
                <b>@placeModel.PricePerDay zł / doba za osobę</b>
            </div>
        </div>
        <AuthorizeView>
            <Authorized Context="auth">
                <EditForm Model="@inputmodel" OnValidSubmit="@HandleValidSubmit">
                    <br />
                    <br />
                    <p><b>Rezerwuj obiekt @placeModel.Name</b></p>

                    <label for="start">Rezerwacja od:</label>
                    <InputDate @bind-Value="inputmodel.StartDate" id="start-date-input" />

                    <label for="end">do:</label>
                    <InputDate @bind-Value="inputmodel.EndDate" id="end-date-input" />

                    <label for="numberOfPeople">Liczba osób:</label>
                    <InputSelect ValueExpression="@(()=>inputmodel.NumberOfPeople)" ValueChanged="@((int e)=>OnNumberOfPeopleChanged(e))" Value=inputmodel.NumberOfPeople>
                        <option value="1">1</option>
                        <option value="2">2</option>
                        <option value="3">3</option>
                        <option value="4">4</option>
                        <option value="5">5</option>
                        <option value="6">6</option>
                        <option value="7">7</option>
                        <option value="8">8</option>
                        <option value="9">9</option>
                        <option value="10">10</option>
                    </InputSelect>
                    <p id="info"></p>
                    <p>Kwota do zapłaty: @checkedMessage</p>
                    <p class="price" id="total-price"></p>
                    <button class="own-button" type="submit">Zarezerwuj</button>
                </EditForm>
            </Authorized>
            <NotAuthorized Context="NotAuh">
                <p>Aby zarezerwować:</p>
                <button class="own-button" type="submit">Zaloguj się</button>
                <button class="own-button" type="submit">Załóż konto</button>
            </NotAuthorized>
        </AuthorizeView>
    </div>
}


@code {
    private string title = "CampApp";

    private string checkedMessage = "*uzupełnij dane rezerwacji*";

    //to co zwroci getplacebyid tzreba przypisac do pola i pptem wyswietlic bo chcemy wyswietlic detale tego place
    private PlaceModel placeModel;

    [Parameter]
    public int PlaceId { get; set; } //podczas otwerania strony jest przekazywane id place, chcemy wyciagnac caly place z bazy:

    protected override async Task OnInitializedAsync()
    {
        try
        {
            placeModel = await PlaceService.GetPlaceById(PlaceId);
            inputmodel.StartDate = DateTime.Now;
            var date = DateTime.Now;
            inputmodel.EndDate = date.AddDays(1);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex);
        }
    }

    private InputModel inputmodel = new InputModel();

    private class InputModel
    {
        public int PlaceId { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public int NumberOfPeople { get; set; } = 1;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var result = await ReservationService.AddReservation(
                PlaceId,
                inputmodel.StartDate,
                inputmodel.EndDate,
                inputmodel.NumberOfPeople);

            //przeladowanie strony z nawigacja do strony glownej:
            NavigationManager.NavigateTo("/myreservations");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private Task OnNumberOfPeopleChanged(int valueOfPeople)
    {
        inputmodel.NumberOfPeople = valueOfPeople;
        CheckAndUpdatePrice();
        return Task.CompletedTask;
    }

    private void CheckAndUpdatePrice()
    {
        var days = (inputmodel.EndDate - inputmodel.StartDate).Days;
        var totalPrice = days * placeModel.PricePerDay * inputmodel.NumberOfPeople;
        checkedMessage = $"{totalPrice} zł";
    }


}

